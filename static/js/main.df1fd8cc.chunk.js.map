{"version":3,"sources":["Clock.tsx","App.tsx","index.tsx"],"names":["formatAMPM","date","hours","getHours","ampm","min","getMinutes","toString","padStart","sec","getSeconds","Clock","state","currentTime","Date","timer","this","window","setInterval","setState","console","info","prevProps","oldName","name","newName","props","debug","clearInterval","className","React","Component","getRandomName","value","now","slice","App","clockName","hasClock","leftClickHandler","rightClickHandler","e","preventDefault","document","addEventListener","removeEventListener","ReactDOM","render","getElementById"],"mappings":"sNAGMA,EAAa,SAACC,GAClB,IAAIC,EAAQD,EAAKE,WACXC,EAAOF,GAAS,GAAK,KAAO,KAElCA,GAAS,GACT,IAAMG,EAAMJ,EAAKK,aAAaC,WAAWC,SAAS,EAAG,KAC/CC,EAAMR,EAAKS,aAAaH,WAAWC,SAAS,EAAG,KAGrD,MAFa,UAAMN,EAAN,YAAeG,EAAf,YAAsBI,EAAtB,YAA6BL,IAY/BO,EAAb,4MACEC,MAAQ,CACNC,YAAa,IAAIC,MAFrB,EAKEC,MAAQ,EALV,uDAOE,WAA2B,IAAD,OACxBC,KAAKD,MAAQE,OAAOC,aAAY,WAC9B,EAAKC,SAAS,CACZN,YAAa,IAAIC,OAEnBM,QAAQC,KAAKrB,EAAW,EAAKY,MAAMC,gBAClC,OAbP,gCAgBE,SACES,GAEA,IAAMC,EAAUD,EAAUE,KACpBC,EAAUT,KAAKU,MAAMF,KAEvBF,EAAUE,OAASR,KAAKU,MAAMF,MAChCJ,QAAQO,MAAR,uBAA8BJ,EAA9B,eAA4CE,MAvBlD,kCA2BE,WACER,OAAOW,cAAcZ,KAAKD,SA5B9B,oBA+BE,WACE,OACE,sBAAKc,UAAU,QAAf,UACE,wBAAQA,UAAU,cAAlB,SACGb,KAAKU,MAAMF,OAGb,YAED,sBAAMK,UAAU,cAAhB,SACG7B,EAAWgB,KAAKJ,MAAMC,sBAzCjC,GAA2BiB,IAAMC,WCjBjC,SAASC,IACP,IAAMC,EAAQnB,KAAKoB,MAAM3B,WAAW4B,OAAO,GAE3C,MAAM,SAAN,OAAgBF,GAQX,IAAMG,EAAb,4MACExB,MAAQ,CACNyB,UAAW,UACXC,UAAU,GAHd,EAMEvB,MAAQ,EANV,EA0BEwB,iBAAmB,WACjB,EAAKpB,SAAS,CACZmB,UAAU,KA5BhB,EAgCEE,kBAAoB,SAACC,GACnBA,EAAEC,iBACF,EAAKvB,SAAS,CACZmB,UAAU,KAnChB,uDAQE,WAA2B,IAAD,OACxBtB,KAAKD,MAAQE,OAAOC,aAAY,WAC9B,EAAKC,SAAS,CACZkB,UAAWL,QAEZ,MAEHW,SAASC,iBAAiB,SAAS,kBAAM,EAAKL,sBAE9CI,SAASC,iBAAiB,eAAe,SAACH,GAAD,OAAO,EAAKD,kBAAkBC,QAjB3E,kCAoBE,WACExB,OAAOW,cAAcZ,KAAKD,OAC1B4B,SAASE,oBAAoB,QAAS7B,KAAKuB,kBAC3CI,SAASE,oBAAoB,cAAe7B,KAAKwB,qBAvBrD,oBAuCE,WACE,OACE,sBAAKX,UAAU,MAAf,UACE,6CACCb,KAAKJ,MAAM0B,UAER,cAAC,EAAD,CACEd,KAAMR,KAAKJ,MAAMyB,mBA9C/B,GAAyBP,IAAMC,WCb/Be,IAASC,OACP,cAAC,EAAD,IACAJ,SAASK,eAAe,W","file":"static/js/main.df1fd8cc.chunk.js","sourcesContent":["/* eslint-disable no-console */\nimport React from 'react';\n\nconst formatAMPM = (date: Date): string => {\n  let hours = date.getHours();\n  const ampm = hours >= 12 ? 'AM' : 'PM';\n\n  hours %= 12;\n  const min = date.getMinutes().toString().padStart(2, '0');\n  const sec = date.getSeconds().toString().padStart(2, '0');\n  const strTime = `${hours}:${min}:${sec} ${ampm}`;\n\n  return strTime;\n};\n\ntype Props = {\n  name: string,\n};\ntype State = {\n  currentTime: Date,\n};\n\nexport class Clock extends React.Component<Props, State> {\n  state = {\n    currentTime: new Date(),\n  };\n\n  timer = 0;\n\n  componentDidMount(): void {\n    this.timer = window.setInterval(() => {\n      this.setState({\n        currentTime: new Date(),\n      });\n      console.info(formatAMPM(this.state.currentTime));\n    }, 1000);\n  }\n\n  componentDidUpdate(\n    prevProps: Props,\n  ): void {\n    const oldName = prevProps.name;\n    const newName = this.props.name;\n\n    if (prevProps.name !== this.props.name) {\n      console.debug(`Renamed from ${oldName} to ${newName}`);\n    }\n  }\n\n  componentWillUnmount(): void {\n    window.clearInterval(this.timer);\n  }\n\n  render() {\n    return (\n      <div className=\"Clock\">\n        <strong className=\"Clock__name\">\n          {this.props.name}\n        </strong>\n\n        {' time is '}\n\n        <span className=\"Clock__time\">\n          {formatAMPM(this.state.currentTime)}\n        </span>\n      </div>\n    );\n  }\n}\n","/* eslint-disable no-console */\nimport React from 'react';\nimport './App.scss';\nimport { Clock } from './Clock';\n\nfunction getRandomName(): string {\n  const value = Date.now().toString().slice(-4);\n\n  return `Clock-${value}`;\n}\n\ntype State = {\n  clockName: string,\n  hasClock: boolean,\n};\n\nexport class App extends React.Component<{}, State> {\n  state = {\n    clockName: 'Clock-0',\n    hasClock: true,\n  };\n\n  timer = 0;\n\n  componentDidMount(): void {\n    this.timer = window.setInterval(() => {\n      this.setState({\n        clockName: getRandomName(),\n      });\n    }, 3300);\n\n    document.addEventListener('click', () => this.leftClickHandler());\n\n    document.addEventListener('contextmenu', (e) => this.rightClickHandler(e));\n  }\n\n  componentWillUnmount(): void {\n    window.clearInterval(this.timer);\n    document.removeEventListener('click', this.leftClickHandler);\n    document.removeEventListener('contextmenu', this.rightClickHandler);\n  }\n\n  leftClickHandler = () => {\n    this.setState({\n      hasClock: true,\n    });\n  };\n\n  rightClickHandler = (e: Event) => {\n    e.preventDefault();\n    this.setState({\n      hasClock: false,\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>React clock</h1>\n        {this.state.hasClock\n          && (\n            <Clock\n              name={this.state.clockName}\n            />\n          )}\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}